# clear  environment (workspace)
rm(list=ls())
#Set working directory
setwd("C:/Users/gbism/OneDrive/Documents/GitHub/Kaplan Meier Survival Rate")
## Libraries
library(readr)
library(survival)
library(ggplot2)
library(ggfortify)
library(cmprsk)
library(dbplyr)
library(dplyr)
library(stringr)
library(tidyr)
library(naniar)
library(gsubfn)
library(ggpubr)
#Create dummy dataset
N = 1000
df <- data.frame(Department = sample(LETTERS[1:6], N, replace = TRUE),
StartDate= sample(seq(as.Date('2009/01/01'), as.Date('2023/03/03'), by="day"), N),
EndDate = sample(seq(as.Date('2009/01/01'), as.Date('2023/03/03'), by="day"), N),
Outcome = sample(c(0,1), size = N, replace = TRUE, prob = c(0.2, 0.8)))
#Remove any that have an end date before start date
df = df %>% filter(
StartDate < EndDate
)
#Create some NA's - this is to act as if a student is retained
#Essentially this is as if no student has graduated or dropped past the year 2020
df = df %>%
replace_with_na_at(.vars = "EndDate",
condition = ~.x > "2020-01-01")
df$Outcome[is.na(df$EndDate)] = NA
df$TimeToOutcome = (df$EndDate - df$StartDate)/365.25
#Create TimeToCens
df$CensDate = as.Date("2023-03-01") #This is the time of censor, an arbitrary time we want to compute retained from
df$TimeToCens = (df$CensDate - df$StartDate)
df$TimeToCens = df$TimeToCens/365.25
#TotalWith
df$TotalWith = ifelse(df$Outcome == 0, df$TimeToOutcome, df$TimeToCens)
#TotalGrad
df$TotalGrad = ifelse(df$Outcome == 1, df$TimeToOutcome, df$TimeToCens)
#TotalTimeCalc
df$TotalTimeCalc = ifelse(df$Outcome == 1, df$TimeToOutcome,
ifelse(!is.na(df$EndDate),(df$EndDate-df$StartDate)/365.25, df$TimeToCens))
#Create a function to make and fortify our KM Model
KM <- function(trydf) {
#Create vectors with Grads and withdrawals
grad1no0 = ifelse(trydf$Outcome == 1, 1, 0)
with1no0 = ifelse(trydf$Outcome == 0, 1, 0)
grad.as<-survfit(Surv(trydf$TotalGrad, grad1no0)~ 1, data=trydf)
withd.as<-survfit(Surv(TotalWith,with1no0)~ 1, data=trydf)
res<-fortify(grad.as)
res1<-fortify(withd.as)
res1$failfuc <- 1- res1$surv
sizeN <- grad.as$n
crtime <- trydf$TotalGrad
#crtime[trydf$TotalWith < trydf$TotalGrad] <- trydf$TotalWith[trydf$TotalWith < trydf$TotalGrad]
crevent <-0
crevent[grad1no0==0] <- 0
crevent[grad1no0==1] <- 1
crevent[with1no0==1] <- 2
cumincmod <-cuminc(crtime,crevent)
rres <- cumincmod[[2]]
rres1 <- cumincmod[[1]]
rresdf <- data.frame(time=rres$time,surv=rres$est)
rres1df <- data.frame(time=rres1$time,surv=rres1$est,failfuc=1-rres1$est)
medvals <- 1-rres1$est
medtims <- rres1$time
medind <- medvals < .5
medtims2 <- medtims[medind]
gradmedian <- round(min(medtims2),2)
return(list(rresdf, rres1df, gradmedian, sizeN))
}
# All Students
trydf = df
outcomes = KM(trydf)
gradcurve = as.data.frame(outcomes[1])
withcurve = as.data.frame(outcomes[2])
medttd = outcomes[3]
totalN = outcomes[4]
(plotall<-ggplot(data= gradcurve, aes(x=time, y = surv))
+ geom_step(aes(x= time, y = 1-surv),color="red", linetype=5, size =1)
+ geom_step(data= withcurve, aes(x=time, y = 1-failfuc), linetype=1,color="green4",size =1)
+ ggtitle(paste("All Students (N=",totalN,")"))
+ theme_bw()
+ theme(plot.title = element_text(hjust = 0.5, size=15))
+ theme(axis.text.x = element_text(size=15))
+ theme(axis.text.y = element_text(size=15))
+ annotate("text",x=0,y=.5,hjust=0,cex=7, color="green4", label=paste("Median TTD=",medttd))
+ xlab("Time from Doctoral Enrollment (years)") + ylab("") + ylim(0,1)
+ scale_x_continuous(breaks=c(0,1,2,3,4,5,6,7,8,9,10), limits=c(0,9.8))
+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()))
####################
#BY DEPARTMENT
for (i in unique(df$Department)) {
trydf <- df[which(df$Department==i),]
outcomes = KM(trydf)
gradcurve = as.data.frame(outcomes[1])
withcurve = as.data.frame(outcomes[2])
medttd = outcomes[3]
totalN = outcomes[4]
(plot1<-ggplot(data= gradcurve, aes(x=time, y = surv))
+ geom_step(aes(x= time, y = 1-surv),color="red", linetype=5, size =1)
+ geom_step(data= withcurve, aes(x=time, y = 1-failfuc), linetype=1,color="green4",size =1)
+ ggtitle(paste("Department",i, "(N=",totalN,")"))
+ theme_bw()
+ theme(plot.title = element_text(hjust = 0.5, size=12))
+ theme(axis.text.x = element_text(size=12))
+ theme(axis.text.y = element_text(size=12))
+ annotate("text",x=0,y=.5,hjust=0,cex=4, color="green4", label=paste("Median TTD=",medttd))
+ xlab("Time from Doctoral Enrollment (years)") + ylab("") + ylim(0,1)
+ scale_x_continuous(breaks=c(0,1,2,3,4,5,6,7,8,9,10,11), limits=c(0,11.1))
+ theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()))
nam = paste0("plot",i)
assign(nam, plot1)
}
#View by department
ggarrange(plotA, plotB, plotC, plotD, plotE, plotF, font.label = list(size = 8))
?ggarrange
